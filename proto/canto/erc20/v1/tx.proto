syntax = "proto3";
package canto.erc20.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "canto/erc20/v1/genesis.proto";

option go_package = "github.com/Canto-Network/Canto/v7/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // ConvertCoin mints a ERC20 representation of the native Cosmos coin denom
  // that is registered on the token mapping.
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse) {
    option (google.api.http).get = "/canto/erc20/v1/tx/convert_coin";
  };
  // ConvertERC20 mints a native Cosmos coin representation of the ERC20 token
  // contract that is registered on the token mapping.
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response) {
    option (google.api.http).get = "/canto/erc20/v1/tx/convert_erc20";
  };

  // UpdateParams updates the parameters of the x/erc20 module.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (google.api.http).get = "/canto/erc20/v1/tx/update_params";
  };
}

// MsgConvertCoin defines a Msg to convert a native Cosmos coin to a ERC20 token
message MsgConvertCoin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "canto/MsgConvertCoin";

  // Cosmos coin which denomination is registered in a token pair. The coin
  // amount defines the amount of coins to convert.
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  // recipient hex address to receive ERC20 token
  string receiver = 2;
  // cosmos bech32 address from the owner of the given Cosmos coins
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgConvertERC20 defines a Msg to convert a ERC20 token to a native Cosmos
// coin.
message MsgConvertERC20 {
  //  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "canto/MsgConvertERC20";

  // ERC20 token contract address registered in a token pair
  string contract_address = 1;
  // amount of ERC20 tokens to convert
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // bech32 address to receive native Cosmos coins
  string receiver = 3;
  // sender hex address from the owner of the given ERC20 tokens
  string sender = 4;
}

// MsgConvertERC20Response returns no fields
message MsgConvertERC20Response {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  option (amino.name) = "canto/MsgUpdateParams";

  // params defines the x/erc20 parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}